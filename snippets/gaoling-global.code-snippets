{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"pyopengl start": {
		"scope": "python",
		"prefix": "pyopengl start",
		"body": [
			"# 导入OpenGL的库",
			"from OpenGL.GL import *",
			"from OpenGL.GLU import *",
			"from OpenGL.GLUT import *",
			"# from numpy import *",
			"import sys",
			"",
			"from contextlib import contextmanager",
			"",
			"import logging as log",
			"",
			"# tag: add module above",
			"",
			"",
			"log.basicConfig(level=log.DEBUG)",
			"",
			"",
			"def rgb(r, g, b):",
			"    \"\"\"for colorize of vscode extention",
			"    \"\"\"",
			"    return r, g, b",
			"",
			"",
			"@contextmanager",
			"def freeze():",
			"    \"\"\"context manager for opengl's push and pop matrix ",
			"    like a freeze magic freeze the above behaviour",
			"    let the change be local",
			"    \"\"\"",
			"    glPushMatrix()",
			"    yield",
			"    glPopMatrix()",
			"",
			"",
			"@contextmanager",
			"def connect(name):",
			"    \"\"\"context manager for opengl's draw things ",
			"    just start point points",
			"    \"\"\"",
			"    glBegin(name)",
			"    yield",
			"    glEnd()",
			"",
			"# tag: basic setting here",
			"",
			"# with tag(\"h1\"):",
			"#     print(\"hello\")",
			"#     print(\"world\")",
			"",
			"",
			"# todo: complate the argvs of these funcs",
			"# note: this is Callback Registration func of glut",
			"",
			"",
			"def DisplayFunc():",
			"    draw_world_base_line()",
			"",
			"    # tag: add draw func above",
			"",
			"    glutSwapBuffers()",
			"",
			"",
			"def OverlayDisplayFunc():",
			"    pass",
			"",
			"",
			"def ReshapeFunc(width, height):",
			"    pass",
			"",
			"",
			"def KeyboardFunc(key, x, y):",
			"    pass",
			"",
			"",
			"def MouseFunc(button, state, x, y):",
			"    pass",
			"",
			"",
			"def MotionFunc(x, y):",
			"    pass",
			"",
			"",
			"def PassiveMotionFunc(x, y):",
			"    pass",
			"",
			"",
			"def VisibilityFunc(state):",
			"    pass",
			"",
			"",
			"def EntryFunc(state):",
			"    pass",
			"",
			"",
			"def SpecialFunc(key, x, y):",
			"    pass",
			"",
			"",
			"def SpaceballMotionFunc(x, y, z):",
			"    pass",
			"",
			"",
			"def SpaceballRotateFunc(x, y, z):",
			"    pass",
			"",
			"",
			"def SpaceballButtonFunc(button, state):",
			"    pass",
			"",
			"",
			"def ButtonBoxFunc(button, state):",
			"    pass",
			"",
			"",
			"def DialsFunc(dial, value):",
			"    pass",
			"",
			"",
			"def TabletMotionFunc(x, y):",
			"    pass",
			"",
			"",
			"def TabletButtonFunc(button, state, x, y):",
			"    pass",
			"",
			"",
			"def MenuStatusFunc(status, x, y):",
			"    pass",
			"",
			"",
			"def IdleFunc():",
			"    pass",
			"",
			"",
			"def TimerFunc(value):",
			"    pass",
			"",
			"################################",
			"",
			"",
			"def init():",
			"    pass",
			"",
			"# tag: add you function here",
			"",
			"",
			"def draw_world_base_line():",
			"    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)",
			"",
			"    with freeze():",
			"        # glTranslate(0.1, 0, 0)",
			"        glRotate(300, 1, 0, 0)",
			"        glRotate(270, 0, 0, 1)",
			"        glScale(0.1, 0.1, 0.1)",
			"",
			"        # note: red is x,green is y, blue is z",
			"        glColor(rgb(255, 0, 0))  # red x",
			"",
			"        glLineWidth(2.0)",
			"        with connect(GL_LINES):",
			"            glVertex3fv([0.0, 0.0, 0.0])",
			"            glVertex3fv([1.0, 0.0, 0.0])",
			"",
			"        glColor(rgb(0, 255, 0))",
			"        with connect(GL_LINES):",
			"            glVertex3fv([0.0, 0.0, 0.0])",
			"            glVertex3fv([0.0, 1.0, 0.0])",
			"",
			"        glColor(rgb(0, 0, 255))",
			"        with connect(GL_LINES):",
			"            glVertex3fv([0.0, 0.0, 0.0])",
			"            glVertex3fv([0.0, 0.0, 1.0])",
			"",
			"",
			"def main():",
			"    glutInit(sys.argv)",
			"    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)",
			"    glutInitWindowPosition(50, 50)",
			"    glutInitWindowSize(400, 400)",
			"    glutCreateWindow(\"opengl demo\")",
			"",
			"    init()",
			"",
			"    # glut callback function regist ignore it",
			"    glutDisplayFunc(DisplayFunc)",
			"    glutOverlayDisplayFunc(OverlayDisplayFunc)",
			"    glutReshapeFunc(ReshapeFunc)",
			"    glutKeyboardFunc(KeyboardFunc)",
			"    glutMouseFunc(MouseFunc)",
			"    glutMotionFunc(MotionFunc)",
			"    glutPassiveMotionFunc(PassiveMotionFunc)",
			"    glutVisibilityFunc(VisibilityFunc)",
			"    glutEntryFunc(EntryFunc)",
			"    glutSpecialFunc(SpecialFunc)",
			"    glutSpaceballMotionFunc(SpaceballMotionFunc)",
			"    glutSpaceballRotateFunc(SpaceballRotateFunc)",
			"    glutSpaceballButtonFunc(SpaceballButtonFunc)",
			"    glutButtonBoxFunc(ButtonBoxFunc)",
			"    glutDialsFunc(DialsFunc)",
			"    glutTabletMotionFunc(TabletMotionFunc)",
			"    glutTabletButtonFunc(TabletButtonFunc)",
			"    glutMenuStatusFunc(MenuStatusFunc)",
			"    glutIdleFunc(IdleFunc)",
			"",
			"    # fro glutTimerFunc",
			"    msecs = 10",
			"    value = 10",
			"    glutTimerFunc(msecs, TimerFunc, value)",
			"    \"\"\"Usage",
			"    void glutTimerFunc(unsigned int msecs,",
			"                   void (*func)(int value), value);",
			"    \"\"\"",
			"",
			"    glutMainLoop()",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
		]
	},
	"logging start": {
		"scope": "python",
		"prefix": "log start",
		"body": [
			"import logging as log",
			"log.basicConfig(level=log.DEBUG)",
			"log.debug('this is a demo massage')"
		],
		"description": "start logging"
	},
	"sqlite3 start": {
		"scope": "python",
		"prefix": "sqlite3Starter",
		"body": [
			"import sqlite3",
			"connect = sqlite3.connect('database')",
			"cursor = connect.cursor()",
			"",
			"cursor.execute()",
			"",
			"connect.commit()",
			"connect.close()"
		],
		"description": "start sqlite3"
	},
	"def start": {
		"scope": "python",
		"prefix": "def",
		"body": [
			"def ${1:functionName}(${2:argvs}):",
			"\t\"\"\"${1:functionName}",
			"\t\"\"\"",
			"\t${3:pass}"
		],
		"description": "start def function"
	},
	"class function def start": {
		"scope": "python",
		"prefix": "class function def",
		"body": [
			"def ${1:functionName}(self${2:,argvs}):",
			"\t\"\"\"${1:functionName}",
			"\t\"\"\"",
			"\t${3:pass}"
		],
		"description": "start class function def"
	},
	"class def start": {
		"scope": "python",
		"prefix": "class def",
		"body": [
			"class ${1:ClassName}(${2:Object}):",
			"\tdef __init__(self,${3:argvs}):",
			"\t\t\"\"\"${1:ClassName}",
			"\t\t\"\"\"",
			"\t\t${4:pass}"
		],
		"description": "start def class"
	},
	"fire start": {
		"scope": "python",
		"prefix": "fireStarter",
		"body": [
			"import fire",
			"# code",
			"# functions or classes",
			"",
			"if __name__ == '__main__':",
			"    fire.Fire()",
			"",
			"# command arguments",
			"#--title=\"this is title\"",
			"",
			"# str",
			"# '\"str\"'",
			"",
			"# dic",
			"# '{\"key\":\"val\"}'",
		],
		"description": "start fire"
	},
	"rest flask": {
		"scope": "python",
		"prefix": "restFlask",
		"body": [
			"# get----read",
			"@app.route('/api/v0.1/$1')",
			"def read$1():",
			"    todoId = int(request.args.get('todoId','-1'))",
			"",
			"    if todoId == -1:",
			"        return jsonify(tasks)",
			"    else:",
			"        if 0<=todoId<len(tasks):",
			"            return jsonify(tasks[todoId])",
			"        else:",
			"            return render_template('base-message.html',message=\"404 not found\"),404",
			"        ",
			"#post----create",
			"@app.route('/api/v0.1/$1',methods=['POST'])",
			"def create$1():",
			"    title = request.args.get('title','untitled')",
			"    description = request.args.get('description','no description')",
			"",
			"    todoId = len(tasks)",
			"",
			"    tasks.append({'id':todoId,'title':title,'description':description})",
			"",
			"    return jsonify(len(tasks)-1)",
			"",
			"# put----update",
			"@app.route('/api/v0.1/$1',methods=['PUT'])",
			"def update$1():",
			"    todoId = int(request.args.get('todoId','-1'))",
			"",
			"    if todoId == -1:",
			"        return 'error',404",
			"",
			"    title = request.args.get('title',tasks[todoId]['title'])",
			"    description = request.args.get('description',tasks[todoId]['description'])",
			"",
			"    tasks[todoId] = {'id':todoId,'title':title,'description':description}",
			"",
			"    return jsonify(tasks[todoId])",
			"",
			"# delete----delete",
			"@app.route('/api/v0.1/$1',methods=['DELETE'])",
			"def delete$1():",
			"    todoId = int(request.args.get('todoId','-1'))",
			"",
			"    if todoId == -1:",
			"        return 'error',404",
			"    tmp = tasks.pop(todoId)",
			"",
			"    return jsonify(tmp)",
		],
		"description": "restFull api flask snippet"
	}
}