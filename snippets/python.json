{
  "example sinppet": {
    "prefix": "example",
    "body": [
      "console.log('$1');",
      "$2"
    ],
    "description": "Log output to console"
  },
  "file python start": {
    "prefix": "fps",
    "body": [
      "#!/usr/bin/env python3",
      "",
      "import logging as log",
      "",
      "log.basicConfig(level=log.DEBUG)",
      "log.debug('this is a demo massage')",
      "",
      "def main():",
      "    pass",
      "",
      "",
      "###",
      "##  UTIL",
      "#",
      "",
      "def read_file(filename):",
      "    with open(filename, encoding='utf-8') as file:",
      "        return file.readlines()",
      "",
      "",
      "if __name__ == '__main__':",
      "    main()",
      ""
    ],
    "description": "Log output to console"
  },
  "clssprite": {
    "prefix": "clssprite",
    "description": "",
    "body": [
      "class $1(pygame.sprite.Sprite):",
      "    def __init__(self):",
      "        \"\"\"__init__\"\"\"",
      "        pygame.sprite.Sprite.__init__(self)",
      "        self.res = pygame.surface.Surface((600, 600), flags=pygame.SRCALPHA)  # 透明",
      "        self.res.fill(pygame.Color(0, 0, 0, 0))",
      "        self.image = self.res",
      "        self.rect = self.image.get_rect()",
      "",
      "    def update(self, *args, **kwargs):",
      "        pass"
    ]
  },
  "start pygame": {
    "prefix": "start pygame",
    "description": "",
    "body": [
      "# note: import",
      "from sys import flags",
      "import pygame",
      "from pygame.locals import *",
      "import sys",
      "import logging as log",
      "",
      "# note: model config",
      "log.basicConfig(level=log.DEBUG)",
      "log.debug(\"this is a demo massage\")",
      "",
      "# note: constant or global define",
      "screen_size = (600, 600)",
      "window_caption = \"keep alive\"",
      "bg = (225, 225, 225)",
      "update_bg = (255, 255, 255)",
      "",
      "# tag: global config",
      "",
      "",
      "# tmp models",
      "class RotateTest(pygame.sprite.Sprite):",
      "    def __init__(self):",
      "        \"\"\"__init__\"\"\"",
      "        pygame.sprite.Sprite.__init__(self)",
      "        self.res = pygame.surface.Surface((600, 600), flags=pygame.SRCALPHA)  # 透明",
      "        self.res.fill(pygame.Color(0, 0, 0, 0))",
      "        self.image = self.res",
      "        self.rect = self.image.get_rect()",
      "",
      "    def update(self, *args, **kwargs):",
      "        pass",
      "",
      "",
      "# main game loop",
      "def game_loop():",
      "    \"\"\"game_loop\"\"\"",
      "    # init pygame and mygame object",
      "    pygame.init()",
      "    pygame.display.set_caption(window_caption)",
      "    screen = pygame.display.set_mode(screen_size)",
      "",
      "    screen.fill(bg)",
      "    background = pygame.Surface((1200, 600))",
      "    background.fill(update_bg)",
      "",
      "    clock = pygame.time.Clock()",
      "    running = True",
      "    display_debug_text = False",
      "",
      "    # init game group",
      "    all_sprite = pygame.sprite.RenderUpdates()",
      "",
      "    # init sprites",
      "    test_sprite = RotateTest()",
      "",
      "    # assign default group",
      "    all_sprite.add(test_sprite)",
      "",
      "    # main game loop",
      "    while running:",
      "        # get and handle event",
      "        for event in pygame.event.get():",
      "            if event.type == pygame.QUIT:",
      "                running = False",
      "            if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:",
      "                if event.mod == pygame.KMOD_NONE:",
      "                    print(",
      "                        \"No modifier keys were in a pressed state when this \"",
      "                        \"event occurred.\"",
      "                    )",
      "                else:",
      "                    if event.mod & pygame.KMOD_CTRL:",
      "                        log.debug(\"ctrl entered\")",
      "                        if pygame.key.get_pressed()[pygame.K_d]:",
      "                            display_debug_text = not display_debug_text",
      "",
      "        # get and update input",
      "        mouse_cur_x, mouse_cur_y = pygame.mouse.get_pos()",
      "        mouse_button_states = pygame.mouse.get_pressed()",
      "        mouse_focused = pygame.mouse.get_focused()",
      "        key_pressed = pygame.key.get_pressed()",
      "",
      "        # sprite variable update",
      "",
      "        # group screen update",
      "        all_sprite.clear(screen, background)",
      "        all_sprite.update()",
      "        dirty = all_sprite.draw(screen)",
      "        pygame.display.update(dirty)",
      "",
      "        # frame lock to 30",
      "        clock.tick(30)",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    game_loop()",
      "    sys.exit()",
      ""
    ]
  }
}